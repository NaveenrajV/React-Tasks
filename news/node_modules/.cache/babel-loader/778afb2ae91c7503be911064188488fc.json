{"ast":null,"code":"import _slicedToArray from \"/home/codebrahma/Documents/React-Tasks/news/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/codebrahma/Documents/React-Tasks/news/src/components/Source/Source.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nconst initialState = {\n  loading: true,\n  posts: {},\n  error: ''\n};\n\nconst reducer = (state, action) => {\n  switch (action.status) {\n    case \"SUCCESS\":\n      return {\n        loading: false,\n        posts: action.data\n      };\n\n    case \"ERROR\":\n      return {\n        loading: false,\n        posts: {},\n        error: \"Something went wrong\"\n      };\n  }\n};\n\nconst Source = () => {\n  const _useReducer = useReducer(reducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const API_KEY = \"e1dddc105cb747f3bdfd1512ea6801c8\";\n  const sourcesList = state.posts.status && state.posts.status.map(source => React.createElement(\"option\", {\n    key: source.id,\n    value: source.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, source.name));\n  useEffect(() => {\n    axios.get(\"https://newsapi.org/v2/sources?apiKey=\".concat(API_KEY)).then(response => {\n      dispatch({\n        status: \"SUCCESS\",\n        data: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        status: \"ERROR\"\n      });\n    });\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, state.loading ? \"Loading......\" : // <lable>Source </lable>\n  React.createElement(\"select\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, sourcesList), state.error ? state.error : null);\n};\n\nexport default Source;","map":{"version":3,"sources":["/home/codebrahma/Documents/React-Tasks/news/src/components/Source/Source.js"],"names":["React","useReducer","useEffect","axios","initialState","loading","posts","error","reducer","state","action","status","data","Source","dispatch","API_KEY","sourcesList","map","source","id","name","get","then","response","catch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAMC,OAAO,GAAI,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClC,UAAQA,MAAM,CAACC,MAAf;AACE,SAAK,SAAL;AACE,aAAO;AACLN,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,KAAK,EAAEI,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO;AACLP,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,KAAK,EAAE,EAFF;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;AARJ;AAcD,CAfD;;AAiBA,MAAMM,MAAM,GAAG,MAAM;AAAA,sBAEOZ,UAAU,CAACO,OAAD,EAAUJ,YAAV,CAFjB;AAAA;AAAA,QAEZK,KAFY;AAAA,QAELK,QAFK;;AAGnB,QAAMC,OAAO,GAAG,kCAAhB;AAEA,QAAMC,WAAW,GAAGP,KAAK,CAACH,KAAN,CAAYK,MAAZ,IAAsBF,KAAK,CAACH,KAAN,CAAYK,MAAZ,CAAmBM,GAAnB,CAAuBC,MAAM,IACrE;AAAQ,IAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAwB,IAAA,KAAK,EAAED,MAAM,CAACE,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CF,MAAM,CAACE,IAApD,CADwC,CAA1C;AAGAlB,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAACkB,GAAN,iDAAmDN,OAAnD,GACGO,IADH,CACQC,QAAQ,IAAI;AAChBT,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,MAAM,EAAE,SAAV;AAAqBC,QAAAA,IAAI,EAAEW,QAAQ,CAACX;AAApC,OAAD,CAAR;AACD,KAHH,EAIGY,KAJH,CAISjB,KAAK,IAAI;AACdO,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACD,KANH;AAOD,GARQ,EAQN,EARM,CAAT;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGIF,KAAK,CAACJ,OAAN,GAAgB,eAAhB,GACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGW,WADH,CALJ,EAWGP,KAAK,CAACF,KAAN,GAAcE,KAAK,CAACF,KAApB,GAA4B,IAX/B,CADF;AAeD,CAlCD;;AAoCA,eAAeM,MAAf","sourcesContent":["import React, { useReducer, useEffect } from 'react'\nimport axios from 'axios'\n\nconst initialState = {\n  loading: true,\n  posts: {},\n  error: ''\n}\n\nconst reducer = ((state, action) => {\n  switch (action.status) {\n    case \"SUCCESS\":\n      return {\n        loading: false,\n        posts: action.data,\n\n      }\n    case \"ERROR\":\n      return {\n        loading: false,\n        posts: {},\n        error: \"Something went wrong\"\n      }\n  }\n})\n\nconst Source = () => {\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const API_KEY = \"e1dddc105cb747f3bdfd1512ea6801c8\"\n\n  const sourcesList = state.posts.status && state.posts.status.map(source =>\n    <option key={source.id} value={source.name}>{source.name}</option>)\n\n  useEffect(() => {\n    axios.get(`https://newsapi.org/v2/sources?apiKey=${API_KEY}`)\n      .then(response => {\n        dispatch({ status: \"SUCCESS\", data: response.data })\n      })\n      .catch(error => {\n        dispatch({ status: \"ERROR\" })\n      })\n  }, [])\n\n\n  return (\n    <div>\n\n      {\n        state.loading ? \"Loading......\" :(\n        // <lable>Source </lable>\n        <select>\n          {sourcesList}\n        </select>\n\n      )\n      }\n      {state.error ? state.error : null}\n    </div>\n  )\n}\n\nexport default Source\n"]},"metadata":{},"sourceType":"module"}